:- use_module(library(random)).
:- dynamic haFattoAcquisti/1.
:- dynamic buyer_in/1.
:- dynamic saldo_agente/1.
:- dynamic spesa/1.
:- dynamic acquisti/1.
:- dynamic impegnato/1.
:- dynamic check_spesa/1.
:- dynamic continuaAcquisti/1.


nome_agente(bruno).
eta_agente(53).
saldo_agente(250).
spesa([]).
acquisti([]).

haFattoAcquisti(no).
impegnato(no).
buyer_in(false).

/*=== Events ===*/
tradeE :- buyer_in(true), saldo_agente(X), eta_agente(Y), messageA(mercato, send_message(trading(Me, X, Y),Me)).


startE :- buyer_in(true),
    write('Sono gia dentro il mercato!').

startE :> messageA(mercato, send_message(entra(Me, buyer), Me)), 
	presentazioneA, 
	retract(buyer_in(false)),
	asserta(buyer_in(true)).
	
esciE :> messageA(mercato, send_message(esce(Me, buyer), Me)),
		salutiA,
		retract(buyer_in(true)),
		asserta(buyer_in(false)).


ricevi_oggettoE(Oggetto):> spesa(ListaSpesa),
						append(ListaSpesa, [Oggetto], ListaCorrente),
						retractall(spesa(_)),
						assert(spesa(ListaCorrente)).
check_spesaE :> stampa_spesa, assert(check_spesa(complete)).

/*=== Proactivity ===*/
	
avvia_trade :- impegnato(no), buyer_in(true), spesa(ListaSpesa),\+nonempty(ListaSpesa).
avvia_tradeI:- saldo_agente(X), eta_agente(Y), messageA(mercato, send_message(trading(Me, X, Y),Me)),
				retract(impegnato(no)), assert(impegnato(si)).	
	
scegli_prodotto:- spesa(ListaSpesa) ,nonempty(ListaSpesa), check_spesa(complete).
scegli_prodottoI:> write('Scelgo un prodotto tra quelli disponibili....'),nl,
	spesa(ListaSpesa),
	acquisti(ListaAcquisti),
    random_member(Oggetto, ListaSpesa),
    write('Voglio acquistare questo oggetto: '), write(Oggetto), nl,
	append(ListaAcquisti, [Oggetto], ListaAcquistiNew),
	retractall(acquisti(_)),
	assert(acquisti(ListaAcquistiNew)),
	delete(ListaSpesa, Oggetto, NuovaListaSpesa),
	retractall(spesa(ListaSpesa)),
    assert(spesa(NuovaListaSpesa)),
	acquistaProdottoA(Oggetto).

considera :- impegnato(no), buyer_in(true), haFattoAcquisti(si),acquisti(ListaAcquisti), nonempty(ListaAcquisti).
consideraI :> write('Ecco i miei acquisti di oggi: '), stampa_acquisti.

/*=== Actions ===*/
presentazioneA:> presentatiA, add_pastA(presentazione,3600).

presentatiA:- haFattoAcquisti(no), \+presentazioneP, write(' Buonasera, mi presento, mi chiamo '), nome(X), write(X), write(', '),
	eta(Y), write(Y), write(' anni '), saldo(Z), write(' , possiedo '), write(Z), write(' Euro. ').

salutiA:- write('Ciao e grazie a tutti! Arrivederci!').

acquistaProdottoA([Nome,Costo]) :-
	spesa(ListaSpesa),
    saldo_agente(Saldo),
    Costo =< Saldo, 
    NuovoSaldo is Saldo - Costo,
    retract(saldo_agente(Saldo)),
    asserta(saldo_agente(NuovoSaldo)),
	write('Mi restano '),
	saldo_agente(X),
	write(X), write(' euro.'),nl,	
	messageA(mercato, send_message(acquisto_effettuato([Nome,Costo],Me),Me)),
	check_acquisti.
stampa_acquisti :-
    acquisti(ListaAcquisti),
    write('Lista acquisti: '), nl,
	(foreach(Oggetto, ListaAcquisti) do write(Oggetto),nl).

stampa_spesa :-
    spesa(ListaSpesa),
	(nonempty(ListaSpesa)->
    write('Lista spesa possibile: '), nl,
	(foreach(Oggetto, ListaSpesa) do write(Oggetto),nl)).
	
nonempty(Lista) :-
    Lista = [_|_].

check_acquisti :- spesa(ListaSpesa),\+nonempty(ListaSpesa),
	nl, write('Ora non sono impegnato e posso dedicarmi a fare acquisti altrove!'),nl,retractall(haFattoAcquisti(no)), 
	assert(haFattoAcquisti(si)),retractall(check_spesa(complete)), retractall(impegnato(si)),
	assert(impegnato(no)), retractall(continuaAcquisti(si)).
	
nome(X) :- nome_agente(X).
eta(X) :- eta_agente(X).
saldo(X) :- saldo_agente(X).